datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique @map("session_token")
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String                    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?                   @unique
    username      String?                   @unique
    emailVerified DateTime?                 @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    conversations ConversationParticipant[]
    messages      Message[]

    @@map("users")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Conversation {
    id              String                    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt       DateTime                  @default(now())
    updatedAt       DateTime                  @updatedAt
    latestMessageId String                    @unique @db.ObjectId
    participants    ConversationParticipant[]
    messages        Message[]
    latestMessage   Message?                  @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ConversationParticipant {
    id                   String   @id @default(auto()) @map("_id") @db.ObjectId
    userId               String   @db.ObjectId
    conversationId       String   @db.ObjectId
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    hasSeenLatestMessage Boolean

    user         User         @relation(fields: [userId], references: [id])
    conversation Conversation @relation(fields: [conversationId], references: [id])
}

model Message {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    conversationId String   @unique @db.ObjectId
    senderId       String   @unique @db.ObjectId
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    sender       User          @relation(fields: [senderId], references: [id])
    conversation Conversation  @relation(fields: [conversationId], references: [id])
    isLatestIn   Conversation? @relation(name: "latestConversationMessage")
}
